@startuml \n\n class Scenario{\n     - name: String;\n}\n\nclass Actuator{ \n   - name: String; \n } \n\n class Action{\n   - name: String;\n   - returnType: DataType;\n   - body: String;\n}\n\nclass Sensor {\n   - name: String;\n}\n\nclass Datacore {\n   - name: String;\n}\n\nclass NotificationProtocol {\n   - name: String;\n}\n\nclass Condition{\n   - name: String;\n   - returnType: DataType;\n   - body: String;\n}\n\nclass Notification{\n   - name: String;\n}\n\nclass Attribute {\n    - name: String;\n    - type: DataType;\n    - value: string;\n}\n\nclass List{\n  - name: String;\n  - type: ListDataType\n}\n\nclass DataMapping {\n    - name: String;\n}\n\n enum DataType{\n  - String\n  - Float\n  - Int\n  - Boolean\n  - Double\n}\n\n enum ListDataType{\n  - List\n  - Set\n  - Hashmap\n}\n\nScenario "1" --> "*" Actuator: has\nScenario "1" --> "*" Attribute: has\n\nActuator "1" --> "1" Sensor : is connected to\n Actuator "1" --> "*" Condition : follows \n Actuator "1" --> "1" NotificationProtocol : follows \n Actuator "1" --> "*" Attribute : has \n\n Sensor "1" --> "*" Attribute : has \n Sensor "1" --> "*" Condition: follows \n Sensor "1" --> "1" DataMapping : maps through \n\n DataMapping "1" --> "1" Datacore : stores data \n\n Datacore "1" --> "1" List : has \n\n NotificationProtocol "1" --> "*" Notification: has NotificationProtocol "1" --> "*" Attribute : has \n NotificationProtocol "1" --> "*" Condition : follows \n\n Notification "1" --> "1" Attribute : has \n\n Condition "0" --> "*" Action : triggers \n Condition "1" --> "*" Datacore : monitors \n Condition "0" --> "*" Attribute: may have \n\n Attribute "1" --> "*" Condition : has \n Attribute -- DataType \n\n List "1" --> "*" Attribute : has \n\n Action "0" --> "*" Actuator : acts on \n Action "0" --> "1" Notification : may send \n Action "0" --> "*" Attribute: may have \n\n @enduml
