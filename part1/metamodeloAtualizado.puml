@startuml

class Scenario{
    - name: String;
}

class Actuator{
   - name: String;
}

class Action{
   - name: String;
   - returnType: DataType;
   - body: String;
}

class Sensor {
   - name: String;
}

class Datacore {
   - name: String;
}

class NotificationProtocol {
   - name: String;
}

class Condition{
   - name: String;
   - returnType: DataType;
   - body: String;
}

class Notification{
   - name: String;
}

class Attribute {
    - name: String;
    - type: DataType;
    - value: string;
    
}

class List{
  - name: String;
  - type: ListDataType
}


class DataMapping {
    - name: String;
}


enum DataType{
  - String
  - Float
  - Int 
  - Boolean 
  - Double
}
enum ListDataType{
  - List
  - Set 
  - Hashmap
}

Scenario "1" --> "*" Actuator: has
Scenario "1" --> "*" Attribute: has

Actuator "1" --> "*" Sensor : is connected to
Actuator "1" --> "*" Condition : follows
Actuator "1" --> "1" NotificationProtocol : follows
Actuator "1" --> "*" Attribute : has

Sensor "1" --> "*" Attribute : has
Sensor "1" --> "*" Condition: follows
Sensor "1" --> "1" DataMapping : maps through

DataMapping "1" --> "1" Datacore : stores data

Datacore "1" --> "1" List : has

NotificationProtocol "1" --> "*" Notification: has
NotificationProtocol "1" --> "*" Attribute : has
NotificationProtocol "1" --> "*" Condition : follows

Notification "1" --> "1" Attribute : has

Condition "0" --> "*" Action : triggers
Condition "1" --> "*" Datacore : monitors
Condition "0" --> "*" Attribute: may have

Attribute "1" --> "*" Condition : has


List "1" --> "*" Attribute : has

Action "0" --> "*" Actuator : acts on
Action "0" --> "1" Notification : may send
Action "0" --> "*" Attribute: may have

@enduml
